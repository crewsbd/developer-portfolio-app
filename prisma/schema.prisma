// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Portfolio {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  description String
  sections    Section[]
  userId      String
}

model Section {
  id              Int        @id @default(autoincrement())
  title           String
  description     String
  backgroundImage Image      @relation(fields: [imageId], references: [id])
  pieces          Piece[]
  Portfolio       Portfolio? @relation(fields: [portfolioId], references: [id])
  portfolioId     Int
  imageId         Int
}

model Piece {
  id           Int      @id @default(autoincrement())
  name         String
  description  String
  primaryImage Int // Which of the images should be highlighted
  images       Image[]
  section      Section? @relation(fields: [sectionId], references: [id])
  sectionId    Int?
}

model Image {
  id          Int       @id @default(autoincrement())
  url         String // S3 bucket url for image
  forPieces   Piece[]
  forSections Section[]
  owner       User      @relation("imageOwner", fields: [ownerId], references: [id])
  ownerId     String
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String? //This is the url to the github image
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  // End auth.js required fields
  firstName     String?
  lastName      String?
  portfolios    Portfolio[]
  images        Image[]     @relation("imageOwner")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
